// Colors
// hsl - hue saturation and lightness.

$backgroundColor:hsl(205, 100%, 96%);
$textColor:hsl(205, 86%,  22%);

// $boxShadow:<offsetx> <offsety> <blur-radius>
$boxShadow:0 5px 15px rgba(0, 0, 0, 0.1);

$buttonColor:rgb(73, 166, 233);
$whiteColor:#fff;
$blackColor:#222;

//transition:default value timing-duration transition-timing-function:linear specifies a transition effect with the same speed from start to end.
$transition: all 0.3s linear;

$closeButton:hsl(360, 67%, 44%);
$closeButtonHover:hsl(360, 71%, 66%);

// Universal Effects
body{
    font-family: 'Piazzolla', serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background-color: $backgroundColor;
    color: $textColor;   
}

button{
    font-family: 'Piazzolla', serif;
}

button:focus{
    outline: none;
}

// For all headers
h1,h2,h3,h4{
    text-transform: capitalize;
    letter-spacing:0.25rem;

    // On Y-axis
    line-height: 1.25;

    margin-bottom: 0.25rem;
}

h1{
    font-size: 3rem;
}

h2{
    font-size: 2rem;
}

h3{
    font-size: 1.25rem;
}

h4{
    font-size: 0.175rem;
}

.image{
    min-height: 100vh;

    // Convert row into column
    display: grid;

    //The CSS place-items shorthand property allows you to align items along both the block and inline directions at once (i.e. the align-items and justify-items properties) in a relevant layout system such as Grid or Flexbox.     
    place-items: center;

    background: url(./hero.jpeg);
    background-position: center;
    background-repeat: no-repeat;

    // If we use background-size: cover; it will cut off the sides of the image, preserving the aspect ratio, and also filling in the space
    background-size: cover;

    .banner{
        background-color: $whiteColor;

        // padding:top & bottom left & right
        padding: 4rem 0rem;

        border-radius: 0.25rem;
        text-align: center;
        width: 90vw;
        max-width:620px;
        box-shadow: $boxShadow;

        .btn{
            text-transform: uppercase;

            // padding:top & bottom left & right
            padding: 0.375rem 0.75rem;

            letter-spacing:0.25rem;

            // For inline-block we can add top right margin padding.
            //It does not move to next line. 
            display: inline-block;

            transition: $transition;
            font-size: 0.875rem;

            // border:size style color
            //Transparent color in CSS makes background elements visible from another top element of the page
            border: 2px solid transparent;

            cursor: pointer;
            box-shadow: $boxShadow;
            border-radius: 0.4rem;
            margin-top: 2rem;
            background-color: $buttonColor;
            color: $whiteColor;
        }

        .btn:hover{
            background-color: $blackColor;
            color: $whiteColor; 
        }
    }
}

.modal-overlay{
    // convert row into column
    display: grid;

    //The CSS place-items shorthand property allows you to align items along both the block and inline directions at once (i.e. the align-items and justify-items properties) in a relevant layout system such as Grid or Flexbox.     
    place-items: center;

    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    background-color: rgba(73, 166, 233, 0.5);
    transition: $transition;

    visibility: hidden;
    z-index: -10;

    text-align: center;

    .modal-container{
        background-color: $whiteColor;
        border-radius:0.4rem;
        width: 90vw;
        height: 30vh;

         /* position: relative, it’ll remain “in the flow” of the layout but you can move it around! */
        position: relative;

        max-width: 620px;

        // convert row into column
        display: grid;

        //The CSS place-items shorthand property allows you to align items along both the block and inline directions at once (i.e. the align-items and justify-items properties) in a relevant layout system such as Grid or Flexbox.     
        place-items: center;

        .close-button{
            /* position: absolute takes elements “out of flow” so its grid space gets collapsed. */
            position: absolute;

            top: 1rem;
            right: 1rem;

            //Transparent color in CSS makes background elements visible from another top element of the page.
            background-color: transparent;
            border-color: transparent;

            font-size: 2rem;
            cursor: pointer;
            transition: $transition;
            color:$closeButton;
        }

        .close-button:hover{
            color: $closeButtonHover;

            // The scale() CSS function defines a transformation that resizes an element on the 2D plane. Because the amount of scaling is defined by a vector, it can resize the horizontal and vertical dimensions at different scales.
            /* Equal to scaleX(1.3) scaleY(1.3) */

            transform: scale(1.3);
        }
    }
}

// To over-ride the .modal-overlay section
.display-overlay{
    visibility: visible;
    z-index: 10;
}